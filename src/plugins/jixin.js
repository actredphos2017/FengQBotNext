//PLUGINX

import axios from "axios";

/**
 * @type {import("../types/plugins").PluginInfo}
 */
export default {
    config: {
        id: "jixin",
        name: "芯",
        author: "尚寂新"
    },
    setup(api) {

        async function hitokotoCmd(ch, string) {
            const res = await axios.get('https://v1.hitokoto.cn/');
            const hit = res.data.hitokoto;
            ch.text(hit);
            await ch.go();
            const tax = [2180323481];
            if (tax.indexOf(ch.userId) != -1) {
                ch.text(`您是尊敬的VIP客户，为了尊显您的VIP身份，已扣除您2原枫林大肥皂币，当前余额为${await ecoSQL(ch.userId, 'del', '2')}原`);
                await ch.go();
            }
            await tryReward(ch);
        }
        api.cmd(["hito", "一言"], hitokotoCmd, {
            description: "一言，获取随机一句话，格式：hito"
        });


        async function whoiamCmd(ch) {
            ch.text(JSON.stringify(ch));
            await ch.go();
            await tryReward(ch);
        }
        api.cmd(["whoiam", "我是谁"], whoiamCmd, {
            description: "获取当前用户信息，格式：whoiam"
        });

        async function ecoSQL(QQnum, method, num = 0) {
            
            const store = api.store;
            let money = await store.get(`${QQnum}_eco`, 0);
            if (!money) money = 0;

            switch (method) {
                case 'add':
                    await store.set(`${QQnum}_eco`, Number(money) + Number(num));
                    break;

                case 'del':
                    await store.set(`${QQnum}_eco`, Number(money) - Number(num));
                    break;
            
                default:
                    break;
            }

            money = await store.get(`${QQnum}_eco`, 0);

            return Number(money);
        }


        async function ecoCmd(ch, QQnum, method, num) {

            if (QQnum && method) {
                
            } else {
                ch.text('[eco]缺少参数');
                await ch.go();
                ch.text('[eco]命令格式：eco [QQnum] [add|del|read] [num]');
                await ch.go();
                await tryReward(ch);
                return false;
            }
            // admin
            const admin = [1812505764, 1814872986];
            if (admin.indexOf(ch.userId) != -1) {
                ch.text(`[eco]你好，您（${ch.context.sender.nickname}）正在执行成员货币操作：`);
                await ch.go();
                if (ecoSQL(QQnum, method, num)) {
                    let methodName = '';
                    switch (method) {
                        case 'add':
                            methodName = '增加';
                            break;
                        case 'del':
                            methodName = '扣除';
                            break;
                    
                        default:
                            methodName = '查询';
                            break;
                    }
                    if ((method != 'read') && !num) {
                        ch.text('[eco]缺少参数');
                        await ch.go();
                        ch.text('[eco]命令格式：eco [QQnum] [add|del|read] [num]');
                        await ch.go();
                        await tryReward(ch);
                        return false;
                    }
                    ch.text(`[eco]操作完成，已为${QQnum}办理${methodName}枫林大肥皂币业务，当前余额为${await ecoSQL(QQnum, method, num)}原`);
                } else {
                    ch.text('[eco]操作失败，红磷救救我');
                }
                await ch.go();
            } else {
                ch.text('[eco]权限不足，无法操作！'+admin.indexOf(ch.userId));
            }
            await ch.go();
            await tryReward(ch);
        }
        api.cmd(["eco", "枫林大肥皂币"], ecoCmd, {
            description: "枫林大肥皂币操作，管理员可用，格式：eco [QQnum] [add|del|read] [num]"
        });

        async function baiduCmd(ch, keyword) {
            if (!keyword) {
                ch.text("请输入关键词");
                await ch.go();
                await tryReward(ch);
                return;
            }
            if (keyword.length > 50) {
                ch.text("关键词过长，请输入更短的关键词");
                await ch.go();
                await tryReward(ch);
                return;
            }
            const image = await api.outside.render.renderHtml({ url: "https://www.baidu.com/s?ie=UTF-8&wd=" + encodeURIComponent(keyword) });
            await ch.image(image).go();
            await tryReward(ch);
        }
        api.cmd(["baidu", "百度"], baiduCmd, {
            description: "百度搜索，格式：baidu [关键词]"
        });

        async function browserCmd(ch, urltext) {
            if (!urltext) {
                ch.text("请输入网址");
                await ch.go();
                await tryReward(ch);
                return;
            }
            if (!urltext.startsWith("http://") && !urltext.startsWith("https://")) {
                ch.text("请输入正确的网址，网址应以http://或https://开头");
                await ch.go();
                await tryReward(ch);
                return;
            }
            if (urltext.length > 100) {
                ch.text("网址过长，请输入更短的网址");
                await ch.go();
                await tryReward(ch);
                return;
            }
            const image = await api.outside.render.renderHtml({ url: urltext });
            await ch.image(image).go();
            await tryReward(ch);
        }
        api.cmd(["browser", "浏览器"], browserCmd, {
            description: "浏览器截图，格式：browser [网址]"
        });

        async function steamGameCmd(ch, id) {
            if (!id) {
                ch.text("请输入蒸汽平台游戏的ID");
                await ch.go();
                await tryReward(ch);
                return;
            }
            const image = await api.outside.render.renderHtml({ url: "https://store.steampowered.com/widget/" + id });
            await ch.image(image).go();
            await tryReward(ch);
        }
        api.cmd(["steam_game", "蒸汽平台游戏"], steamGameCmd, {
            description: "获取蒸汽平台游戏的预览图卡片，格式：steam_game [游戏ID]"
        });

        async function bvidCmd(ch, id) {
            if (!id) {
                ch.text("请输入哔哩哔哩视频的bvid");
                await ch.go();
                await tryReward(ch);
                return;
            }
            if (!id.startsWith("BV")) {
                ch.text("请输入正确的bvid，bvid应以BV开头");
                await ch.go();
                await tryReward(ch);
                return;
            }
            const image = await api.outside.render.renderHtml({ url: "https://player.bilibili.com/player.html?bvid="+ id +"&as_wide=1&high_quality=1", delay: 9000});
            await ch.image(image).go();
            await tryReward(ch);
        }
        api.cmd(["bvid", "哔哩视频"], bvidCmd, {
            description: "获取哔哩哔哩视频的预览图，格式：bvid [bvid]"
        });

        async function hhshCmd(ch, string) {
            if (!string) {
                ch.text("请输入要猜测的内容");
                await ch.go();
                await tryReward(ch);
                return;
            }
            const res = await axios.post('https://lab.magiconch.com/api/nbnhhsh/guess', { text: `${string}` });
            let hit = res.data[0].trans;
            let results = "孩子可能在说：";
            hit.forEach(element => {
                results += element + ', ';
            });
            ch.text(results);
            await ch.go();
            const tax = [2180323481];
            if (tax.indexOf(ch.userId) != -1) {
                ch.text(`您是尊敬的VIP客户，为了尊显您的VIP身份，已扣除您2原枫林大肥皂币，当前余额为${await ecoSQL(ch.userId, 'del', '2')}原`);
                await ch.go();
            }
            await tryReward(ch);
        }
        api.cmd(["hhsh", "好好说话"], hhshCmd, {
            description: "好好说话，猜测孩子在说什么，格式：hhsh [内容]"
        });

        // --- 水论文生成器 begin ---
        // 直接写死data内容
        const slscqData = {
            "title": [
                "解决xx亟需v",
                "治理xx问题 加强v是关键",
                "治理xx需v",
                "v是xx的重要举措",
                "以n实现xx目标",
                "促进n带来xx",
                "助推n实现xx",
                "让xx和n两翼齐飞",
                "n是开启xx之门的金钥匙",
                "做好xx文章 v是前言",
                "让n成为治疗xx的良药",
                "n是xx的助推器",
                "扬n之帆 起xx之航",
                "以n为音符 奏xx之乐章",
                "以n之飞翼 展xx之宏图",
                "引n之水 育xx之花",
                "向n要质量",
                "用创新推动xx产业化",
                "破除xx“围墙心态”",
                "在行动中树立xx标杆",
                "把牢xx之舵，高扬n之旗",
                "用n力量撬动xx攻坚",
                "紧绷xx这跟弦",
                "同频共振，唱好xx大合唱",
                "让xx落地，让n生根",
                "努力培育良好的xx心态",
                "向发展xx要活力",
                "治理xx决不能手软",
                "让xx，内化于心外化于行",
                "发展之果，孕自xx之花",
                "让xx驱动发展行稳致远",
                "少些功利才能重拾xx的乐趣",
                "以创新开辟xx出路",
                "以钉钉子精神 打赢xx攻坚战",
                "细节决定成败 需多积xx之功",
                "xx，让生活更美好",
                "xx是实现自我净化的有效路径",
                "让xx公平更让人省心",
                "将xx保护纳入法治轨道",
                "不能让xx“野蛮生长”",
                "xx，走“流量”更需要“走心”",
                "xx，创新时代的“晴雨表”",
                "xx的根基在n"
            ],
            "beginning": [
                "长期以来，xx一直是n老大难问题，从一定意义上讲，能否彻底解决xx问题，关乎vn，关乎vn，是p的重中之重。因此，解决xx问题，是p之举。",
                "自p以来，xx问题就困扰着我们。xx问题不仅极易造成vn，而且可能引发n危害，最终导致n的后果。因此，我们必须走p之路。sp",
                "当下，xx已进入发展快车道，带来了n的方便。但是，当我们站在新的历史发展关口，发现xx问题已经严重干扰了n建设。这些问题如果得不到有效解决，将会导致vn进而影响p。我们不仅要vn，更要vn。总而言之要sp",
                "长期以来，我们在n领域成绩斐然，n突飞猛进。然而xx的发展并不像它表面那么光鲜，xx问题依然突出。因此，必须正确认识n，确保n的实现。我们不仅要vn更要p。",
                "ss孔子的话穿越历史的场合，到今天依旧振聋发聩，他不断警示我们xx是我们关注的重点。xx在n运行方面发挥了至关重要的作用，促进社会飞速发展，推动经济跨越进步，但是令人心痛的是，xx也带来了一系列不容忽视的问题，如只注重了xx的表面没有真正理解xx的内涵，这造成了xx永续发展的潜力损害，从这个意义上说正确使用xx这把锋利的刀刃，助力xx的全面合理运行显得尤为重要，因此，将xx放在核心区位，置于首要地位，将是国家富强、民族振兴、人民幸福的根本之道。"
            ],
            "body": [
                "综观xx发展史，各国都在不断改进vn，在n上，力求完善。以n为例，为了xx，巴拿马政府采取了p的政策，使得。鲜明的案例告诉我们，要实现xx的目的，必须在继承借鉴中发展n，sp",
                "现在社会上xx的这个领域出现了一系列问题。究其原因都在于n这方面的事没做好。此问题如果不能得到重视，及时解决，将会影响vn，制约vn，甚至危害n。xxv的事件更是有利的印证。因此我们应该p。sp",
                "子曰：ss形式的变化，环境的变化，群众的期待，都对xx提出了新的要求和期许。如果能够意识到n的重要性，就可以发挥其在n的潜在价值，就可以发挥其在n的巨大作用。倘若不能vn，那么就意味着不仅不能p，而且不能p，甚至会p。因此，xx是现实之需，发展之要。子曾经曰过：ss，在人生阶段中，要vn在xx这条奋斗之路上，vn是我们始终如一的追求。",
                "有一个名为“蝴蝶效应”的理论：南美洲一只蝴蝶煽动翅膀有可能在一个月后的美国大陆形成一场龙卷风。它启示我们，小的、好的机制或事物应及时正确引导，为社会发展服务；小的、坏的机制或是事物应及时改正或是消除，避免危害社会。在 xx领域， n只是一个微小的细节，然而他所带来的影响却是深远的。不仅会vn，还会制约vn。因此我们要vn，总而言之，我们需要sp",
                "根据n表明，要想xx，就必须vn，我们应该清醒地看到，我国正处于结构调整期、产业转型期，经济发展面临挑战，人均资源相对不足，进一步发展还面临着一些突出的问题和矛盾。从我们发展的战略全局看，走p道路，调整n结构，转变n方式，缓解n瓶颈制约，加快n升级，促进n，维护n利益。进入新阶段，xx面临着新的机遇和挑战。按照部署和要求，全面贯彻落实科学发展观，求真务实，开拓创新，扎实工作，为构建和谐社会服务，为vn，为vn，综上所述，我们应该sp",
                "新时代来临，我们的xx实现了历史性跨越式发展，n得到切实巩固和提高，n得到深刻变化；n发展步伐加快；n又快又好发展。目前我们已vn。但是我们也要清醒地认识到，n的发展仍不能满足广大人民群众对于xx的强烈需求，还不能适应构建和谐社会的迫切需要。xx发展不平衡的问题突出，实施n尚未取得根本性突破，n改革需要深化，n需要提高，n尚未得到很好解决。n仍面临着新的机遇和挑战。总而言之，sp"
            ],
            "ending": [
                "当前xx的问题，既有n的原因，也与n有直接关系。因此，解决xx问题，既需要n又需要n更需要从根本上vn，只有这样，才能vn，才能vn。",
                "从vn，到vn，从vn，到vn，从vn，到vn，归结到一点上都是xx。ss，xx绝非一朝一夕之事，只有紧紧抓住n这个“牛鼻子”，久久为功，善始善终，方能推动n，为实现xx贡献力量。",
                "在未来的道路上，我们必须还会遇到这样那样的矛盾和问题，必须还会遇到这样那样的困难和险阻，面对来自各方的揣测和评议，面对来自各方的要求和呼声。惟有树立p的理念，用p去协调解决xx，才能在xx上取得突破，让xx共同享有人生出彩，梦想成真的机会，实现xx自由。",
                "当前社会现实中的xx现象，既有n的原因，也与n有直接关系。因此，解决xx问题，既需要vn，也需要vn，更需要vn。只有这样，才能实现xx目标。",
                "ss对于xx问题，需要我们发扬钉钉子的精神，一锤一锤敲下去，将n干在实处，做到细处，落在深处。惟其如此，才能将钉子钉牢钉实，才能将xx问题彻底解决，才能让发展的脚步更加平稳坚定。"
            ],
            "verb": [
                "推进","推动","健全","统领","协调","统筹","转变","提高","实现","适应","改革","创新","扩大","加强","促进","巩固","保障","完善","加快","振兴","扶持","改善","调整","优化","解决","宣传","教育","发挥","支持","带动","帮助","深化","规范","强化","统筹","指导","服务","健全","确保","维护","优先","贯彻","实施","深化","保证","鼓励","引导","坚持","深化","强化","监督","管理","开展","规划","整合","理顺","推行","纠正","满足","推广","遏制","整治","保护","健全","丰富","夯实","统一","尊重","制约","适应","发扬","拓宽","拓展","规范","改进","形成","逐步","实现","规范","坚持","调节","取缔","调控","把握","弘扬","借鉴","倡导","培育","打牢","武装","凝聚","激发","说服","感召","尊重","包容","树立","培育","发扬","提倡","营造","促进","唱响","主张","弘扬","通达","发展","疏导","着眼","吸引","塑造","搞好","履行","倾斜","惠及","简化","衔接","调处","关切","汇集","分析","排查","协商","化解","动员","联动","激发","增进","汲取","检验","保护","鼓励","完善","宽容","增强","融洽","凝聚","汇集","筑牢","考验","进取","凝聚","设置","吸纳","造就","聚焦","支撑","展现","体现","分析","研究","了解","掌握","发现","提出","推进","推动","制定","出台","完善","建立","健全","加强","强化","增强","促进","加深","深化","扩大","落实","细化","突出","建设","营造","开展","发挥","发扬","创新","转变","发展","统一","提高","提升","保持","优化","召开","举行","贯彻","执行","树立","引导","规范","整顿","服务","协调","沟通","配合","合作","支持","加大","开拓","拓展","巩固","保障","保证","形成","指导"
            ],
            "noun": [
                "关系","力度","速度","反映","诉求","形势","任务","本质属性","总体布局","战略任务","内在要求","重要进展","决策部署","结合点","突出地位","最大限度","指导思想","科学性","协调性","体制机制","基本方略","理念意识","基本路线","基本纲领","秩序","基本经验","出发点","落脚点","要务","核心","主体","积极因素","水平","方针","结构","增量","比重","规模","标准","办法","主体","作用","特色","差距","渠道","方式","主导","纽带","主体","载体","制度","需求","能力","负担","体系","重点","资源","职能","倾向","秩序","途径","活力","项目","工程","政策","项目","竞争力","环境","素质","权利","利益","权威","氛围","职能","作用","事权","需要","能力","基础","比重","长效机制","举措","要素","精神","根本","地位","成果","核心","精神","力量","纽带","思想","理想","活力","信念","信心","风尚","意识","主旋律","正气","热点","情绪","内涵","管理","格局","准则","网络","稳定","安全","支撑","局面","环境","本领","位置","敏锐性","针对性","有效性","覆盖面","特点","规律","阵地","政策","措施","制度保障","任务","体系","机制","体制","系统","规划","战略","方针","政策","措施","要点","重点","焦点","难点","热点","亮点","矛盾","问题","建设","思想","认识","作风","整治","环境","秩序","作用","地方","基层","传统","运行","监测","监控","调控","监督","工程","计划","行动","创新","增长","方式","模式","转变","质量","水平","效益","会议","文件","精神","意识","服务","协调","沟通","力度","领域","空间","成绩","成就","进展","实效","基础","前提","关键","保障","动力","条件","环节","方法","思路","设想","途径","道路","主意","办法","力气","功夫","台阶","形势","情况","意见","建议","网络","指导","指南","目录","方案"
            ],
            "adverb_1": [
                "狠","早","细","实","再","更","狠","早","细","实","再","更"
            ],
            "adverb_2": [
                "加快","尽快","抓紧","尽早","整体","充分","继续","深入","自觉","主动","自主","密切","大力","全力","尽力","务必","务求","有效"
            ],
            "phrase": [
                "立足当前","着眼长远","抓住机遇","应对挑战","突出重点","分步实施","全面推进","统筹兼顾","综合治理","融入其中","贯穿始终","切实抓好","扎实推进","加快发展","持续增收","积极稳妥","狠抓落实","从严控制","严格执行","坚决制止","明确职责","高举旗帜","坚定不移","牢牢把握","积极争取","深入开展","注重强化","规范程序","改进作风","积极发展","努力建设","依法实行","良性互动","优势互补","率先发展","互惠互利","做深、做细、做实","全面分析","全面贯彻","持续推进","全面落实、全面实施","逐步扭转","基本形成","普遍增加","基本建立","更加完备","逐步完善","明显提高","逐渐好转","逐步形成","不断加强","持续增效","巩固深化","大幅提高","显著改善","不断增强","日趋完善","比较圆满","统一思想","提高认识","认清形势","明确任务","加强领导","完善机制","交流经验","研究问题","团结协作","密切配合","真抓实干拓进取","突出重点","落实责任","各司其职","各负其责","集中精力","聚精会神","一心一意","心无旁骛","兢兢业业","精益求精","一抓到底","爱岗敬业","求真务实","胸怀全局","拓宽视野"
            ],
            "sentence": [
                "“足寒伤心，民寒伤国。”",
                "“从来治国者，宁不忘渔樵。”",
                "“上之为政，得下之情则治，不得下情则乱。”",
                "“人聚则强，人散则弱同心同德，庶几有成。”",
                "“水有源，故其流不穷；木有根，故其生不穷。”",
                "“国无常强无常弱，奉法者强则国强，奉法者弱则国弱。”",
                "“奉公如法，则上下平。”",
                "“天下之事，不难于立法，而难于法之需行;不难于听言，而难于言之需效。”",
                "“人无德不立，国无德不兴。”",
                "“勿以善小而不为，勿以恶小而为之。”",
                "“其身正，不令而行；其身不正，虽令不从。”",
                "“利居众后，责在人先。”",
                "“天行健，君子以自强不息地势坤，君子以厚德载物。”",
                "“苟日新，日日新，又日新。”",
                "“工欲善其事，需先利其器。”",
                "“居安思危，思则有备，有备无患。”",
                "“夫民，别而听之则愚，合而听之则圣。”",
                "“民者，国之根也，诚宜重其食，爱其命。”",
                "“有理而无益于治者，君子弗言；有能而无益于事者，君子弗为。”",
                "“治事不若治人，治人不若治法，治法不若治时。”",
                "“民惟邦本，本固邦宁。”",
                "“政贵有恒。”",
                "“不以一己之利为利，而使天下受其利；不以一己之害为害，而使天下释其害。”",
                "“苟利于民，不必法古；苟周于事，不必循旧。”",
                "“政纲虽举，必求益其所未至；德泽虽布，必思及其所未周。”",
                "“莫三人而迷。”",
                "“天下犹人之体，腹心充实，四支虽病，终无大患。”",
                "“享天下之利者，任天下之患；居天下之乐者，同天下之忧。”",
                "“求木之长者，必固其根本；欲流之远者，必浚其泉源；思国之安者，必积其德义。”",
                "“虑于民也深，则谋其始也精。”",
                "“上安下顺，弊绝风清。”",
                "“积力之所举，即无不胜也；众智之所为，即无不成也。”",
                "“召远在修近，闭祸在除怨。”",
                "“天下顺治在民富，天下和静在民乐，天下兴行在民趋于正。”",
                "“居之以强力，发之以果敢，而成之以无私。”",
                "“达人无不可，忘己爱苍生。”",
                "“为国者以富民为本，以正学为基。”",
                "“千夫诺诺，不如一士之谔谔。”",
                "“构大厦者先择匠而后简材，治国家者先择佐而后定民。”",
                "“正其本者万事理，劳于永者逸于使。”",
                "“为之于未有，治之于未乱。”",
                "“民安土重迁，不可卒变，易以顺行，难以逆动。”",
                "“治身莫先于孝，治国莫先于公。”",
                "“利莫大于治，害莫大于乱。”",
                "“知屋漏者在宇下，知政失者在草野,知经误者在诸子。”",
                "“宽则得众，信则人任焉。”",
                "“理国要道，在于公平正直。”",
                "“先民有言，询于刍荛。”"
            ],
            "parallel_sentence": [
                "求真务实，积极推进xx工作制度化，建立体系，积极推进xx工作正常化，规范办文，积极推进xx工作程序化，强化责任，积极推进xx工作有序化，注重质量，积极推进xx服务规范化，统筹兼顾，积极推进xx工作正常化。",
                "以求真务实的态度，积极推进xx工作制度化，以优化服务为目的，积极推进xx工作正常化，以提质加速为责任，积极推进xx工作程序化，以畅通安全为保障，积极推进xx工作智能化，以立此存照为借鉴，积极推进xx工作规范化，以解决问题为重点，积极推进xx工作有序化，以服务机关为宗旨，积极推进xx服务优质化，以统筹兼顾为重点，积极推进xx工作常态化。",
                "求真务实，抓好xx调研工作，提高质量，做好xx信息工作，紧跟进度，抓好xx督查工作，高效规范，抓好xx文秘工作，高度负责，做好xx保密工作，协调推进，做好xx档案工作，积极稳妥，做好xx信访工作，严格要求，做好xx服务工作。",
                "理思路，订制度，不断提高xx服务新水平，抓业务，重实效，努力开创xx工作新局面，重协调，强进度，尽快展现xx工作新成果，抓学习，重廉洁，促进队伍xx素质新提高。",
                "建章立制，积极推进xx管理制度化，规范办文，积极推进xx工作程序化，建立体系，积极推进xx督查正常化，注重质量，积极推进xx工作规范化，各司其职，积极推进xx工作有序化。"
            ]
        };

        let dataCache = null;
        async function loadData() {
            if (dataCache) return dataCache;
            dataCache = slscqData;
            return dataCache;
        }

        function get_random_num(total) { return Math.floor(Math.random() * total); }
        function get_random(arr) { return arr[get_random_num(arr.length)]; }
        function get_title(data) { return get_random(data['title']); }
        function get_noun(data) { return get_random(data['noun']); }
        function get_verb(data) { return get_random(data['verb']); }
        function get_adverb(data, type) {
            switch (type) {
                case 1: return get_random(data['adverb_1']);
                case 2: return get_random(data['adverb_2']);
            }
            return '';
        }
        function get_phrase(data) { return get_random(data['phrase']); }
        function get_sentence(data) { return get_random(data['sentence']); }
        function get_parallel_sentence(data) { return get_random(data['parallel_sentence']); }
        function get_beginning(data) { return get_random(data['beginning']); }
        function get_body(data) { return get_random(data['body']); }
        function get_ending(data) { return get_random(data['ending']); }
        function replace_key(str, key, theme) { return str.replace(new RegExp(key, 'g'), theme); }
        function replace_xx(str, theme) { return replace_key(str, 'xx', theme); }
        function replace_vn(str, data) {
            return str.replace(/vn/g, _ => {
                const vns = [];
                vns.length = get_random_num(4) + 1;
                vns.fill(0);
                return vns.map(_ => get_verb(data) + get_noun(data)).join('，');
            });
        }
        function replace_v(str, data) { return replace_key(str, 'v', get_verb(data)); }
        function replace_n(str, data) { return replace_key(str, 'n', get_noun(data)); }
        function replace_ss(str, data) { return replace_key(str, 'ss', get_sentence(data)); }
        function replace_sp(str, data) { return replace_key(str, 'sp', get_parallel_sentence(data)); }
        function replace_p(str, data) { return replace_key(str, 'p', get_phrase(data)); }

        function replace_all(str, theme, data) {
            str = replace_vn(str, data);
            str = replace_v(str, data);
            str = replace_n(str, data);
            str = replace_ss(str, data);
            str = replace_sp(str, data);
            str = replace_p(str, data);
            str = replace_xx(str, theme);
            return str;
        }

        function slscq(theme = '年轻人买房', essay_num = 500, data) {
            const begin_num = Math.floor(essay_num * 0.15);
            const body_num = Math.floor(essay_num * 0.7);
            const end_num = begin_num;

            let title = replace_all(get_title(data), theme, data);
            let begin = '';
            let body = '';
            let end = '';

            while (begin.length < begin_num) {
                begin += replace_all(get_beginning(data), theme, data);
            }
            while (body.length < body_num) {
                body += replace_all(get_body(data), theme, data);
            }
            while (end.length < end_num) {
                end += replace_all(get_ending(data), theme, data);
            }

            return `【${title}】\n${begin}\n${body}\n${end}`;
        }

        async function slscqCmd(ch, theme = '年轻人买房', essay_num = 500) {
            const data = await loadData();
            let num = Number(essay_num);
            if (isNaN(num) || num < 100) num = 500;
            if (!theme) theme = '年轻人买房';
            const result = slscq(theme, num, data);
            ch.text(result);
            await ch.go();
            await tryReward(ch);
        }
        api.cmd(["slscq", "水论文"], slscqCmd, {
            description: "生成水论文，格式：slscq [主题] [字数]"
        });
        // --- 水论文生成器 end ---

        // --- 典bot自动回复 begin ---
        const responses = {
            典: ['赢', '孝', '不用', '觉', '认'],
            孝: ['典', '支', '不错', '同', '对', '你好', '妈', '谢'],
            急: ['孝', '??', '？？', '不是', '病', '疯', 'sb', '傻', '逼', '蚌', '妈'],
            乐: ['孝', '典', '急', '赢', '蚌', '麻', '妈', '是吧', '没完'],
            蚌: ['急', '赢', '妈', '停', '别'],
            赢: ['蚌'],
            麻: ['典'],
            确实: ['图灵', '离谱']
        };

        // 用于记录用户最近的消息关键词
        let lastUserMessages = [];

        function getBotResponse(userMessage) {
            let keywords = [];
            // 匹配关键词
            for (const key in responses) {
                const values = responses[key];
                for (const value of values) {
                    if (userMessage.includes(value)) {
                        keywords.push(key);
                        break;
                    }
                }
            }
            if (!keywords.length) {
                keywords = ['乐', '蚌', '典'];
            }
            // 去除与上次重复的
            if (lastUserMessages.length) {
                const lastUserMessage = lastUserMessages[lastUserMessages.length - 1];
                const lastUserMessageIndex = keywords.indexOf(lastUserMessage);
                if (lastUserMessageIndex !== -1) {
                    keywords.splice(lastUserMessageIndex, 1);
                }
            }
            if (keywords.length > 1 && lastUserMessages.length > 1) {
                const lastUserMessage = lastUserMessages[lastUserMessages.length - 2];
                const lastUserMessageIndex = keywords.indexOf(lastUserMessage);
                if (lastUserMessageIndex !== -1) {
                    keywords.splice(lastUserMessageIndex, 1);
                }
            }
            if (!keywords.length) {
                keywords = ['乐', '蚌', '典'];
            }
            // 随机选择一个回应
            let response = keywords[Math.floor(Math.random() * keywords.length)];
            lastUserMessages.push(response);
            return response;
        }

        async function dianBotCmd(ch, ...args) {
            const userInput = args.join(' ').trim();
            if (!userInput) {
                ch.text('请输入内容');
                await ch.go();
                await tryReward(ch);
                return;
            }
            // 模拟延迟
            await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500 + userInput.length * 20));
            const botMessage = getBotResponse(userInput);
            ch.text(botMessage);
            await ch.go();
            await tryReward(ch);
        }
        api.cmd(["dianbot", "典bot"], dianBotCmd, {
            description: "典bot自动回复，格式：典bot [内容]"
        });
        // --- 典bot自动回复 end ---

        // --- homo表达式分解器 begin ---
        const homo = ((Nums) => {
            const numsReversed = Object.keys(Nums).map(x => +x).filter(x => x > 0)
            const getMinDiv = (num) => {
                for (let i = numsReversed.length; i >= 0; i--)
                    if (num >= numsReversed[i])
                        return numsReversed[i]
            }
            const isDotRegex = /\.(\d+?)0{0,}$/
            const demolish = (num) => {
                if (typeof num !== "number")
                    return ""

                if (num === Infinity || Number.isNaN(num))
                    return `这么恶臭的${num}有必要论证吗`

                if (num < 0)
                    return `(⑨)*(${demolish(num * -1)})`.replace(/\*\(1\)/g, "")

                if (!Number.isInteger(num)) {
                    const n = num.toFixed(16).match(isDotRegex)[1].length
                    return `(${demolish(num * Math.pow(10, n))})/(10)^(${n})`
                }

                if (Nums[num])
                    return String(num)

                const div = getMinDiv(num)
                return (`${div}*(${demolish(Math.floor(num / div))})+` +
                    `(${demolish(num % div)})`).replace(/\*\(1\)|\+\(0\)$/g, "")
            }
            //Finisher
            const finisher = (expr) => {
                expr = expr.replace(/\d+|⑨/g, (n) => Nums[n]).replace("^", "**")
                while (expr.match(/[\*|\/]\([^\+\-\(\)]+\)/))
                    expr = expr.replace(/([\*|\/])\(([^\+\-\(\)]+)\)/, (m, $1, $2) => $1 + $2)
                while (expr.match(/[\+|\-]\([^\(\)]+?\)[\+|\-|\)]/))
                    expr = expr.replace(/([\+|\-])\(([^\(\)]+)\)([\+|\-|\)])/, (m, $1, $2, $3) => $1 + $2 + $3)
                while (expr.match(/[\+|\-]\(([^\(\)]+)\)$/))
                    expr = expr.replace(/([\+|\-])\(([^\(\)]+)\)$/, (m, $1, $2) => $1 + $2)
                if (expr.match(/^\([^\(\)]+?\)$/))
                    expr = expr.replace(/^\(([^\(\)]+)\)$/, "$1")
                expr = expr.replace(/\+-/g,'-')
                return expr
            }
            return (num) => finisher(demolish(num))
        })({
            229028: "(114514+114514)",
            114514: "114514",
            58596: "114*514",
            49654: "11*4514",
            45804: "11451*4",
            23256: "114*51*4",
            22616: "11*4*514",
            19844: "11*451*4",
            16030: "1145*14",
            14515: "1+14514",
            14514: "1*14514",
            14513: "-1+14514",
            11455: "11451+4",
            11447: "11451-4",
            9028: "(1+1)*4514",
            8976: "11*4*51*4",
            7980: "114*5*14",
            7710: "(1+14)*514",
            7197: "1+14*514",
            7196: "1*14*514",
            7195: "-1+14*514",
            6930: "11*45*14",
            6682: "(1-14)*-514",
            6270: "114*(51+4)",
            5818: "114*51+4",
            5810: "114*51-4",
            5808: "(1+1451)*4",
            5805: "1+1451*4",
            5804: "1*1451*4",
            5803: "-1+1451*4",
            5800: "(1-1451)*-4",
            5725: "1145*(1+4)",
            5698: "11*(4+514)",
            5610: "-11*(4-514)",
            5358: "114*(51-4)",
            5005: "11*(451+4)",
            4965: "11*451+4",
            4957: "11*451-4",
            4917: "11*(451-4)",
            4584: "(1145+1)*4",
            4580: "1145*1*4",
            4576: "(1145-1)*4",
            4525: "11+4514",
            4516: "1+1+4514",
            4515: "1+1*4514",
            4514: "1-1+4514",
            4513: "-1*1+4514",
            4512: "-1-1+4514",
            4503: "-11+4514",
            4112: "(1+1)*4*514",
            3608: "(1+1)*451*4",
            3598: "(11-4)*514",
            3435: "-1145*(1-4)",
            3080: "11*4*5*14",
            3060: "(11+4)*51*4",
            2857: "1+14*51*4",
            2856: "1*14*51*4",
            2855: "-1+14*51*4",
            2850: "114*5*(1+4)",
            2736: "114*(5+1)*4",
            2652: "(1-14)*51*-4",
            2570: "1*(1+4)*514",
            2475: "11*45*(1+4)",
            2420: "11*4*(51+4)",
            2280: "114*5*1*4",
            2248: "11*4*51+4",
            2240: "11*4*51-4",
            2166: "114*(5+14)",
            2068: "11*4*(51-4)",
            2067: "11+4*514",
            2058: "1+1+4*514",
            2057: "1/1+4*514",
            2056: "1/1*4*514",
            2055: "-1/1+4*514",
            2054: "-1-1+4*514",
            2045: "-11+4*514",
            2044: "(1+145)*14",
            2031: "1+145*14",
            2030: "1*145*14",
            2029: "-1+145*14",
            2024: "11*(45+1)*4",
            2016: "-(1-145)*14",
            1980: "11*45*1*4",
            1936: "11*(45-1)*4",
            1848: "(11+451)*4",
            1824: "114*(5-1)*4",
            1815: "11+451*4",
            1808: "1*(1+451)*4",
            1806: "1+1+451*4",
            1805: "1+1*451*4",
            1804: "1-1+451*4",
            1803: "1*-1+451*4",
            1802: "-1-1+451*4",
            1800: "1*-(1-451)*4",
            1793: "-11+451*4",
            1760: "-(11-451)*4",
            1710: "114*-5*(1-4)",
            1666: "(114+5)*14",
            1632: "(1+1)*4*51*4",
            1542: "1*-(1-4)*514",
            1526: "(114-5)*14",
            1485: "11*-45*(1-4)",
            1456: "1+1451+4",
            1455: "1*1451+4",
            1454: "-1+1451+4",
            1448: "1+1451-4",
            1447: "1*1451-4",
            1446: "-1+1451-4",
            1428: "(11-4)*51*4",
            1386: "11*(4+5)*14",
            1260: "(1+1)*45*14",
            1159: "1145+14",
            1150: "1145+1+4",
            1149: "1145+1*4",
            1148: "1145-1+4",
            1142: "1145+1-4",
            1141: "1145-1*4",
            1140: "(1145-1)-4",
            1131: "1145-14",
            1100: "11*4*5*(1+4)",
            1056: "11*4*(5+1)*4",
            1050: "(11+4)*5*14",
            1036: "(1+1)*(4+514)",
            1026: "114*-(5-14)",
            1020: "1*(1+4)*51*4",
            981: "1+14*5*14",
            980: "1*14*5*14",
            979: "-1+14*5*14",
            910: "-(1-14)*5*14",
            906: "(1+1)*451+4",
            898: "(1+1)*451-4",
            894: "(1+1)*(451-4)",
            880: "11*4*5*1*4",
            836: "11*4*(5+14)",
            827: "11+4*51*4",
            825: "(11+4)*(51+4)",
            818: "1+1+4*51*4",
            817: "1*1+4*51*4",
            816: "1*1*4*51*4",
            815: "-1+1*4*51*4",
            814: "-1-1+4*51*4",
            805: "-11+4*51*4",
            784: "(11+45)*14",
            771: "1+14*(51+4)",
            770: "1*14*(51+4)",
            769: "(11+4)*51+4",
            761: "(1+14)*51-4",
            730: "(1+145)*(1+4)",
            726: "1+145*(1+4)",
            725: "1*145*(1+4)",
            724: "-1-145*-(1+4)",
            720: "(1-145)*-(1+4)",
            719: "1+14*51+4",
            718: "1*14*51+4",
            717: "-1-14*-51+4",
            715: "(1-14)*-(51+4)",
            711: "1+14*51-4",
            710: "1*14*51-4",
            709: "-1+14*51-4",
            705: "(1+14)*(51-4)",
            704: "11*4*(5-1)*4",
            688: "114*(5+1)+4",
            680: "114*(5+1)-4",
            667: "-(1-14)*51+4",
            660: "(114+51)*4",
            659: "1+14*(51-4)",
            658: "1*14*(51-4)",
            657: "-1+14*(51-4)",
            649: "11*(45+14)",
            644: "1*(1+45)*14",
            641: "11+45*14",
            632: "1+1+45*14",
            631: "1*1+45*14",
            630: "1*1*45*14",
            629: "1*-1+45*14",
            628: "114+514",
            619: "-11+45*14",
            616: "1*-(1-45)*14",
            612: "-1*(1-4)*51*4",
            611: "(1-14)*-(51-4)",
            609: "11*(4+51)+4",
            601: "11*(4+51)-4",
            595: "(114+5)*(1+4)",
            584: "114*5+14",
            581: "1+145*1*4",
            580: "1*145/1*4",
            579: "-1+145*1*4",
            576: "1*(145-1)*4",
            575: "114*5+1+4",
            574: "114*5/1+4",
            573: "114*5-1+4",
            567: "114*5+1-4",
            566: "114*5*1-4",
            565: "114*5-1-4",
            561: "11/4*51*4",
            560: "(1+1)*4*5*14",
            558: "11*4+514",
            556: "114*5-14",
            545: "(114-5)*(1+4)",
            529: "1+14+514",
            528: "1*14+514",
            527: "-1+14+514",
            522: "(1+1)*4+514",
            521: "11-4+514",
            520: "1+1+4+514",
            519: "1+1*4+514",
            518: "1-1+4+514",
            517: "-1+1*4+514",
            516: "-1-1+4+514",
            514: "(1-1)/4+514",
            513: "-11*(4-51)-4",
            512: "1+1-4+514",
            511: "1*1-4+514",
            510: "1-1-4+514",
            509: "11*45+14",
            508: "-1-1-4+514",
            507: "-11+4+514",
            506: "-(1+1)*4+514",
            502: "11*(45+1)-4",
            501: "1-14+514",
            500: "11*45+1+4",
            499: "11*45*1+4",
            498: "11*45-1+4",
            495: "11*(4+5)*(1+4)",
            492: "11*45+1-4",
            491: "11*45-1*4",
            490: "11*45-1-4",
            488: "11*(45-1)+4",
            481: "11*45-14",
            480: "11*(45-1)-4",
            476: "(114+5)/1*4",
            470: "-11*4+514",
            466: "11+451+4",
            460: "114*(5-1)+4",
            458: "11+451-4",
            457: "1+1+451+4",
            456: "1*1+451+4",
            455: "1-1+451+4",
            454: "-1+1*451+4",
            453: "-1-1+451+4",
            452: "114*(5-1)-4",
            450: "(1+1)*45*(1+4)",
            449: "1+1+451-4",
            448: "1+1*451-4",
            447: "1/1*451-4",
            446: "1*-1+451-4",
            445: "-1-1+451-4",
            444: "-11+451+4",
            440: "(1+1)*4*(51+4)",
            438: "(1+145)*-(1-4)",
            436: "-11+451-4",
            435: "-1*145*(1-4)",
            434: "-1-145*(1-4)",
            432: "(1-145)*(1-4)",
            412: "(1+1)*4*51+4",
            404: "(1+1)*4*51-4",
            400: "-114+514",
            396: "11*4*-(5-14)",
            385: "(11-4)*(51+4)",
            376: "(1+1)*4*(51-4)",
            375: "(1+14)*5*(1+4)",
            368: "(1+1)*(45+1)*4",
            363: "(1+1451)/4",
            361: "(11-4)*51+4",
            360: "(1+1)*45*1*4",
            357: "(114+5)*-(1-4)",
            353: "(11-4)*51-4",
            352: "(1+1)*(45-1)*4",
            351: "1+14*-5*-(1+4)",
            350: "1*(1+4)*5*14",
            349: "-1+14*5*(1+4)",
            341: "11*(45-14)",
            337: "1-14*-(5+1)*4",
            336: "1*14*(5+1)*4",
            335: "-1+14*(5+1)*4",
            329: "(11-4)*(51-4)",
            327: "-(114-5)*(1-4)",
            325: "-(1-14)*5*(1+4)",
            318: "114+51*4",
            312: "(1-14)*-(5+1)*4",
            300: "(11+4)*5/1*4",
            297: "-11*(4+5)*(1-4)",
            291: "11+4*5*14",
            286: "(1145-1)/4",
            285: "(11+4)*(5+14)",
            282: "1+1+4*5*14",
            281: "1+14*5/1*4",
            280: "1-1+4*5*14",
            279: "1*-1+4*5*14",
            278: "-1-1+4*5*14",
            275: "1*(1+4)*(51+4)",
            270: "(1+1)*45*-(1-4)",
            269: "-11+4*5*14",
            268: "11*4*(5+1)+4",
            267: "1+14*(5+14)",
            266: "1*14*(5+14)",
            265: "-1+14*(5+14)",
            260: "1*(14+51)*4",
            259: "1*(1+4)*51+4",
            257: "(1+1)/4*514",
            252: "(114-51)*4",
            251: "1*-(1+4)*-51-4",
            248: "11*4+51*4",
            247: "-(1-14)*(5+14)",
            240: "(11+4)*(5-1)*4",
            236: "11+45*(1+4)",
            235: "1*(1+4)*(51-4)",
            234: "11*4*5+14",
            231: "11+4*(51+4)",
            230: "1*(1+45)*(1+4)",
            229: "1145/(1+4)",
            227: "1+1+45*(1+4)",
            226: "1*1+45*(1+4)",
            225: "11*4*5+1+4",
            224: "11*4*5/1+4",
            223: "11*4*5-1+4",
            222: "1+1+4*(51+4)",
            221: "1/1+4*(51+4)",
            220: "1*1*(4+51)*4",
            219: "1+14+51*4",
            218: "1*14+51*4",
            217: "11*4*5+1-4",
            216: "11*4*5-1*4",
            215: "11*4*5-1-4",
            214: "-11+45*(1+4)",
            212: "(1+1)*4+51*4",
            211: "11-4+51*4",
            210: "1+1+4+51*4",
            209: "1+1*4*51+4",
            208: "1*1*4+51*4",
            207: "-1+1*4*51+4",
            206: "11*4*5-14",
            204: "(1-1)/4+51*4",
            202: "1+1-4+51*4",
            201: "1/1-4+51*4",
            200: "1/1*4*51-4",
            199: "1*-1+4*51-4",
            198: "-1-1+4*51-4",
            197: "-11+4+51*4",
            196: "-(1+1)*4+51*4",
            195: "(1-14)*5*(1-4)",
            192: "(1+1)*4*(5+1)*4",
            191: "1-14+51*4",
            190: "1*-14+51*4",
            189: "-11-4+51*4",
            188: "1-1-(4-51)*4",
            187: "1/-1+4*(51-4)",
            186: "1+1+(45+1)*4",
            185: "1-1*-(45+1)*4",
            184: "114+5*14",
            183: "-1+1*(45+1)*4",
            182: "1+1+45/1*4",
            181: "1+1*45*1*4",
            180: "1*1*45*1*4",
            179: "-1/1+45*1*4",
            178: "-1-1+45*1*4",
            177: "1+1*(45-1)*4",
            176: "1*1*(45-1)*4",
            175: "-1+1*(45-1)*4",
            174: "-1-1+(45-1)*4",
            172: "11*4*(5-1)-4",
            171: "114*(5+1)/4",
            170: "(11-45)*-(1+4)",
            169: "114+51+4",
            168: "(11+45)*-(1-4)",
            165: "11*-45/(1-4)",
            161: "114+51-4",
            160: "1+145+14",
            159: "1*145+14",
            158: "-1+145+14",
            157: "1*(1-4)*-51+4",
            154: "11*(4-5)*-14",
            152: "(1+1)*4*(5+14)",
            151: "1+145+1+4",
            150: "1+145*1+4",
            149: "1*145*1+4",
            148: "1*145-1+4",
            147: "-1+145-1+4",
            146: "11+45*-(1-4)",
            143: "1+145+1-4",
            142: "1+145*1-4",
            141: "1+145-1-4",
            140: "1*145-1-4",
            139: "-1+145-1-4",
            138: "-1*(1+45)*(1-4)",
            137: "1+1-45*(1-4)",
            136: "1*1-45*(1-4)",
            135: "-1/1*45*(1-4)",
            134: "114+5/1*4",
            133: "114+5+14",
            132: "1+145-14",
            131: "1*145-14",
            130: "-1+145-14",
            129: "114+5*-(1-4)",
            128: "1+1+(4+5)*14",
            127: "1-14*(5-14)",
            126: "1*(14-5)*14",
            125: "-1-14*(5-14)",
            124: "114+5+1+4",
            123: "114-5+14",
            122: "114+5-1+4",
            121: "11*(45-1)/4",
            120: "-(1+1)*4*5*(1-4)",
            118: "(1+1)*(45+14)",
            117: "(1-14)*(5-14)",
            116: "114+5+1-4",
            115: "114+5*1-4",
            114: "11*4+5*14",
            113: "114-5/1+4",
            112: "114-5-1+4",
            111: "11+4*5*(1+4)",
            110: "-(11-451)/4",
            107: "11-4*-(5+1)*4",
            106: "114-5+1-4",
            105: "114+5-14",
            104: "114-5-1-4",
            103: "11*(4+5)+1*4",
            102: "11*(4+5)-1+4",
            101: "1+1*4*5*(1+4)",
            100: "1*(1+4)*5*1*4",
            99: "11*4+51+4",
            98: "1+1+4*(5+1)*4",
            97: "1+1*4*(5+1)*4",
            96: "11*(4+5)+1-4",
            95: "114-5-14",
            94: "114-5/1*4",
            93: "(1+1)*45-1+4",
            92: "(1+1)*(45-1)+4",
            91: "11*4+51-4",
            90: "-114+51*4",
            89: "(1+14)*5+14",
            88: "1*14*(5+1)+4",
            87: "11+4*(5+14)",
            86: "(1+1)*45*1-4",
            85: "1+14+5*14",
            84: "1*14+5*14",
            83: "-1+14+5*14",
            82: "1+1+4*5/1*4",
            81: "1/1+4*5*1*4",
            80: "1-1+4*5*1*4",
            79: "1*-1+4*5/1*4",
            78: "(1+1)*4+5*14",
            77: "11-4+5*14",
            76: "1+1+4+5*14",
            75: "1+14*5*1+4",
            74: "1/1*4+5*14",
            73: "1*14*5-1+4",
            72: "-1-1+4+5*14",
            71: "(1+14)*5-1*4",
            70: "11+45+14",
            69: "1*14+51+4",
            68: "1+1-4+5*14",
            67: "1-1*4+5*14",
            66: "1*14*5-1*4",
            65: "1*14*5-1-4",
            64: "11*4+5*1*4",
            63: "11*4+5+14",
            62: "1+14+51-4",
            61: "1+1+45+14",
            60: "11+45*1+4",
            59: "114-51-4",
            58: "-1+1*45+14",
            57: "1+14*5-14",
            56: "1*14*5-14",
            55: "-1+14*5-14",
            54: "11-4+51-4",
            53: "11+45+1-4",
            52: "11+45/1-4",
            51: "11+45-1-4",
            50: "1+1*45/1+4",
            49: "1*1*45/1+4",
            48: "-11+45+14",
            47: "1/-1+45-1+4",
            46: "11*4+5+1-4",
            45: "11+4*5+14",
            44: "114-5*14",
            43: "1+1*45+1-4",
            42: "11+45-14",
            41: "1/1*45*1-4",
            40: "-11+4*51/4",
            39: "-11+45+1+4",
            38: "-11+45*1+4",
            37: "-11+45-1+4",
            36: "11+4*5+1+4",
            35: "11*4+5-14",
            34: "1-14+51-4",
            33: "1+1+45-14",
            32: "1*1+45-14",
            31: "1/1*45-14",
            30: "1*-1+45-14",
            29: "-11+45-1-4",
            28: "11+4*5+1-4",
            27: "11+4*5/1-4",
            26: "11-4+5+14",
            25: "11*4-5-14",
            24: "1+14-5+14",
            23: "1*14-5+14",
            22: "1*14+5-1+4",
            21: "-1-1+4+5+14",
            20: "-11+45-14",
            19: "1+1+4*5+1-4",
            18: "1+1+4*5*1-4",
            17: "11+4*5-14",
            16: "11-4-5+14",
            15: "1+14-5+1+4",
            14: "11+4-5/1+4",
            13: "1*14-5/1+4",
            12: "-11+4+5+14",
            11: "11*-4+51+4",
            10: "-11/4+51/4",
            9: "11-4+5+1-4",
            8: "11-4+5/1-4",
            7: "11-4+5-1-4",
            6: "1-14+5+14",
            5: "11-4*5+14",
            4: "-11-4+5+14",
            3: "11*-4+51-4",
            2: "-11+4-5+14",
            1: "11/(45-1)*4",
            0: "(1-1)*4514",
            "⑨": "11-4-5+1-4",
        });

        async function homoCmd(ch, num) {
            if (typeof num === 'undefined' || num === null || num === '') {
                ch.text('请输入要分解的数字');
                await ch.go();
                await tryReward(ch);
                return;
            }
            let n = Number(num);
            if (isNaN(n)) {
                ch.text('请输入有效数字');
                await ch.go();
                await tryReward(ch);
                return;
            }
            const result = homo(n);
            ch.text(result);
            await ch.go();
            await tryReward(ch);
        }
        api.cmd(["homo", "拆分114514"], homoCmd, {
            description: "114514梗表达式分解，格式：homo [数字]"
        });
        // --- homo表达式分解器 end ---

        // --- 道具商店 begin ---
        // 商店物品列表，后续可直接扩展
        const shopItems = [
            { name: "枫林", price: 100, desc: "神秘的枫林道具" },
            { name: "红磷", price: 100, desc: "危险的红磷道具" },
            { name: "机芯", price: 100, desc: "高科技机芯道具" },
            { name: "小漏", price: 100, desc: "小漏道具" },
            { name: "cece", price: 100, desc: "cece道具" },
            { name: "阿姆斯特朗炮", price: 300, desc: "阿姆斯特朗回旋加速喷气式阿姆斯特朗炮", type: "attack" },
            { name: "冈钉", price: 500, desc: "冈钉攻击牌", type: "attack" },
            { name: "籽岷敲桌", price: 100, desc: "籽岷敲桌攻击牌", type: "attack" },
            { name: "巨型能量罩", price: 500, desc: "巨型能量罩防御牌", type: "defense" },
            { name: "钛合金苦茶", price: 200, desc: "钛合金苦茶防御牌", type: "defense" },
            { name: "平底锅", price: 100, desc: "平底锅防御牌", type: "defense" }
        ];

        // 获取用户背包
        async function getBag(userId) {
            const bag = await api.store.get(`${userId}_bag`, {});
            return bag || {};
        }

        // 保存用户背包
        async function setBag(userId, bag) {
            await api.store.set(`${userId}_bag`, bag);
        }

        // 通用奖励函数
        async function tryReward(ch) {
            if (Math.random() < 0.3) {
                const reward = Math.floor(Math.random() * 81) + 20;
                let eco = await api.store.get(`${ch.userId}_eco`, 0);
                eco += reward;
                await api.store.set(`${ch.userId}_eco`, eco);
                ch.text(`\n\n【🎉 恭喜你获得了${reward}原！当前余额：${eco}原】`);
            }
        }

        // 战斗功能
        async function fightCmd(ch, targetQQ, itemName) {
            const attackerId = ch.userId;
            if (!targetQQ || !itemName) {
                ch.text("格式：shop fight [对方QQ号] [物品名]");
                await ch.go();
                return;
            }
            if (String(targetQQ) === String(attackerId)) {
                ch.text("不能攻击自己！");
                await ch.go();
                return;
            }
            const item = shopItems.find(i => i.name === itemName);
            if (!item) {
                ch.text("没有该物品！");
                await ch.go();
                return;
            }
            if (item.type !== "attack") {
                ch.text("只能使用攻击牌进行攻击！");
                await ch.go();
                return;
            }
            let attackerBag = await getBag(attackerId);
            if (!attackerBag[itemName] || attackerBag[itemName] < 1) {
                ch.text(`你没有${itemName}！`);
                await ch.go();
                return;
            }
            let targetBag = await getBag(targetQQ);
            const defenseList = shopItems.filter(i => i.type === "defense").map(i => i.name);
            const attackList = shopItems.filter(i => i.type === "attack").map(i => i.name);
            const normalList = shopItems.filter(i => !i.type).map(i => i.name);

            const attackPower = item.price;
            let defendCard = null;
            for (const def of defenseList) {
                if (targetBag[def] > 0) {
                    defendCard = shopItems.find(i => i.name === def);
                    break;
                }
            }
            if (!defendCard) {
                for (const atk of attackList) {
                    if (targetBag[atk] > 0) {
                        defendCard = shopItems.find(i => i.name === atk);
                        break;
                    }
                }
            }
            if (!defendCard) {
                for (const nor of normalList) {
                    if (targetBag[nor] > 0) {
                        defendCard = shopItems.find(i => i.name === nor);
                        break;
                    }
                }
            }
            if (!defendCard) {
                ch.text("对方没有可被攻击的物品！");
                await ch.go();
                return;
            }
            const defendHp = defendCard.price;
            let msg = "";
            if (attackPower < defendHp) {
                msg = `你用${itemName}（攻击力${attackPower}）攻击了${targetQQ}的${defendCard.name}（血量${defendHp}），攻击失败，对方未受损失，你的${itemName}未消耗。`;
            } else {
                attackerBag[itemName] -= 1;
                targetBag[defendCard.name] -= 1;
                await setBag(attackerId, attackerBag);
                await setBag(targetQQ, targetBag);
                msg = `你用${itemName}（攻击力${attackPower}）攻击了${targetQQ}的${defendCard.name}（血量${defendHp}），攻击成功！你的${itemName}和对方的${defendCard.name}都已消耗。`;
                if (Math.random() < 0.06) {
                    const reward = Math.floor(Math.random() * 51) + 50;
                    let eco = await api.store.get(`${attackerId}_eco`, 0);
                    eco += reward;
                    await api.store.set(`${attackerId}_eco`, eco);
                    msg += `\n【🎉 你在战斗中获得了${reward}原！当前余额：${eco}原】`;
                }
            }
            ch.text(msg);
            await ch.go();
        }

        // 商店命令
        async function shopCmd(ch, action, ...args) {
            const userId = ch.userId;
            if (!action || action === "help") {
                ch.text(
                    "【道具商店】\n" +
                    "shop list —— 查看商店物品\n" +
                    "shop buy [物品名] [数量] —— 购买道具\n" +
                    "shop bag —— 查看你的背包\n" +
                    "shop fight [对方QQ号] [物品名] —— 使用攻击牌攻击对方\n" +
                    "shop help —— 查看帮助\n\n" +
                    "【卡牌大战玩法说明】\n" +
                    "1. 购买攻击牌/防御牌/普通牌，售价即为血量。\n" +
                    "2. 攻击牌可攻击他人，攻击力等于售价。\n" +
                    "3. 攻击优先消耗对方防御牌→攻击牌→普通牌。\n" +
                    "4. 攻击力小于对方牌血量则攻击失败，否则双方各损失一张卡。\n" +
                    "5. 攻击成功有6%概率获得50~100原奖励。"
                );
                await tryReward(ch);
                await ch.go();
                return;
            }
            if (action === "list") {
                let msg = "【商店物品列表】\n";
                shopItems.forEach(item => {
                    msg += `${item.name}（${item.price}原）：${item.desc}`;
                    if (item.type === "attack") msg += "【攻击牌】";
                    if (item.type === "defense") msg += "【防御牌】";
                    msg += "\n";
                });
                ch.text(msg);
                await tryReward(ch);
                await ch.go();
                return;
            }
            if (action === "buy") {
                const itemName = args[0];
                let count = Number(args[1]) || 1;
                if (!itemName) {
                    ch.text("请输入要购买的物品名，格式：shop buy [物品名] [数量]");
                    await tryReward(ch);
                    await ch.go();
                    return;
                }
                const item = shopItems.find(i => i.name === itemName);
                if (!item) {
                    ch.text("没有该物品！");
                    await tryReward(ch);
                    await ch.go();
                    return;
                }
                if (count < 1 || isNaN(count)) count = 1;
                const totalCost = item.price * count;
                let balance = await api.store.get(`${userId}_eco`, 0);
                if (balance < totalCost) {
                    ch.text(`余额不足，购买${itemName}需要${totalCost}原，你当前余额为${balance}原。`);
                    await tryReward(ch);
                    await ch.go();
                    return;
                }
                await api.store.set(`${userId}_eco`, balance - totalCost);
                let bag = await getBag(userId);
                bag[itemName] = (bag[itemName] || 0) + count;
                await setBag(userId, bag);
                ch.text(`购买成功！获得${itemName} x${count}，花费${totalCost}原。`);
                await tryReward(ch);
                await ch.go();
                return;
            }
            if (action === "bag") {
                let bag = await getBag(userId);
                let msg = "【你的背包】\n";
                let hasItem = false;
                for (const [name, count] of Object.entries(bag)) {
                    if (count > 0) {
                        msg += `${name} x${count}\n`;
                        hasItem = true;
                    }
                }
                if (!hasItem) msg += "空空如也~";
                ch.text(msg);
                await tryReward(ch);
                await ch.go();
                return;
            }
            if (action === "fight") {
                await fightCmd(ch, args[0], args[1]);
                return;
            }
            ch.text("未知操作，输入 shop help 查看用法。");
            await tryReward(ch);
            await ch.go();
        }

        api.cmd(["shop", "商店"], shopCmd, {
            description: "道具商店，格式：shop [list|buy|bag|fight|help]"
        });
        // --- 道具商店 end ---

    }
}
